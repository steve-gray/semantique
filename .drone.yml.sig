eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgICAjIFByZWFtYmxlIHRvIG1ha2Ugc3VyZSBwcm9qZWN0IGlzIHJlYWR5LgogICAgaW5zdGFsbF9ucG1fcGFja2FnZXM6CiAgICAgICAgaW1hZ2U6IG5vZGU6NAogICAgICAgIGVudmlyb25tZW50OgogICAgICAgICAgICAtIE5QTV9DT05GSUdfTE9HTEVWRUw9d2FybgogICAgICAgIGNvbW1hbmRzOgogICAgICAgICAgICAtIG5wbSBpbnN0YWxsCiAgICAgICAgICAgIC0gbnBtIHRlc3QKCiAgICAjIFB1Ymxpc2ggdGhlIHRlc3QgcGx1Z2luLgogICAgZG9ja2VyX3B1Ymxpc2hfc21va2U6CiAgICAgICAgaW1hZ2U6IHBsdWdpbnMvZG9ja2VyCiAgICAgICAgcmVwbzogZXZlbnR1YWxjb25zaXN0ZW5jeS9zZW1hbnRpcXVlCiAgICAgICAgdGFnOiBzbW9rZQogICAgICAgIHdoZW46CiAgICAgICAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgICAgICAgIGV2ZW50OiBwdXNoCgogICAgIyBVc2UgdGhlIHNtb2tlIHZlcnNpb24gdG8gYXBwbHkgb3VyIG93biB2ZXJzaW9uaW5nIHJ1bGVzLgogICAgcnVuX3NlbWFudGlxdWVfc2VsZjoKICAgICAgICBpbWFnZTogZXZlbnR1YWxjb25zaXN0ZW5jeS9zZW1hbnRpcXVlOnNtb2tlCiAgICAgICAgcHVsbDogdHJ1ZQogICAgICAgIHdoZW46CiAgICAgICAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgICAgICAgIGV2ZW50OiBwdXNoCgogICAgIyBQdXNoIHRoZSBsYXRlc3QgYW5kIG9uYnVpbGQgdmVyc2lvbiB0YWdzLgogICAgZG9ja2VyX3B1Ymxpc2hfcmVsZWFzZToKICAgICAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgICAgICByZXBvOiBldmVudHVhbGNvbnNpc3RlbmN5L3NlbWFudGlxdWUKICAgICAgICB0YWc6CiAgICAgICAgICAgIC0gbGF0ZXN0CiAgICAgICAgICAgIC0gb25idWlsZAogICAgICAgIHdoZW46CiAgICAgICAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgICAgICAgIGV2ZW50OiBwdXNoCg.4DtSImAk62P88KZJdhbcbpVuLkGPuepfwJcdm19qkO8